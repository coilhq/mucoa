@startuml

participant "Mojaloop Adapter" as dfsp #B0D5FF

box Central-Ledger #FFFFF9
    participant "**API**" as cl_api
    participant "__api__ / Handler" as cl_handler
    participant "__domain__ / Service" as cl_domain
    participant "__models__ / Facade" as cl_facade

    note over cl_api
        NodeJS interface
        invokes REST API
    end note

    note over cl_domain
        Domain folder exposing
        service functions
    end note

    note over cl_facade
        Facade stores & retrieves
        data to & from databases
    end note
end box

box Storage #F9FFF9
	Participant "TigerBeetle Client" as tb_client #D5E8D4
	collections "TigerBeetle Cluster" as tb_nodes #D5E8D4
	database "SQL / PostgreSQL" as cl_db #DAE8FC
	database "Redis" as redis_cache #E1D5E7
end box

autonumber
group Create Participant
    dfsp -> cl_api : //JSON// \n**(participant data)**
    cl_api -> cl_handler : ///jmeter/participants/create// \nHandler invoked
    cl_handler -> cl_domain : Service layer invoked
    cl_domain -> cl_facade : Domain to facade
    cl_facade -> cl_db : **[ASYNC]** \nCreate DB records \n*//participant//, \n*//participantCurrency//, \n*//participantPosition//
    cl_facade -> tb_client : //account// create requested via the CL-TB interface
    tb_client -> tb_nodes : //account// distributed to nodes\n via the state machine
    tb_nodes -> tb_nodes : VSR replicates account \nacross cluster
    tb_client --> cl_facade : return //account// create error **(if applicable)**
    cl_facade <-- cl_db : **[ASYNC]**\n Database transaction committed
    cl_facade --> cl_domain : Return result
    cl_domain --> cl_handler : Return result
    cl_handler --> cl_api : Return result
    cl_api --> dfsp : Return result
end

@enduml
