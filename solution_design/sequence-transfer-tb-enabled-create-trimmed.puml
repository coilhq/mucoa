@startuml

participant "Mojaloop Adapter" as dfsp #B0D5FF

box Central-Ledger #FFFFF9
    participant "**API**" as cl_api
    participant "__api__ / Handler" as cl_handler
    participant "__domain__ / Service" as cl_domain
    participant "__models__ / Facade" as cl_facade

    note over cl_api
            NodeJS interface
            invokes REST API
    end note

    note over cl_domain
            Domain folder exposing
            service functions
    end note

    note over cl_facade
        Facade stores & retrieves
        data to & from databases
    end note

end box

box Storage #F9FFF9
	participant "TigerBeetle Client" as tb_client #D5E8D4
	collections "TigerBeetle Cluster" as tb_nodes #D5E8D4
	database "MySQL" as cl_db #DAE8FC
	database "Redis" as redis_cache #E1D5E7
end box

autonumber
group Create Transfer (2-Phase)
== Transfer Prepare ==
    dfsp -> cl_api : //JSON// \n**(transfer data)**
    cl_api -> cl_handler : ///jmeter/transfers/prepare// \nHandler invoked
    cl_handler -> cl_domain : Service layer invoked
    cl_domain -> cl_facade : Domain to facade
    cl_facade -> cl_db : Database validations:\n*//validateFspiopSourceMatchesPayer//\n*//validateParticipantByName//\n*//validatePositionAccountByNameAndCurrency//\n*//validateParticipantByName//\n*//validateAmount//\n*//validateConditionAndExpiration//\n*//validateDifferentDfsp//
    cl_facade -> redis_cache : Lookup Participant data by \n//name//, //account type// (POSITION) and //currency//.
    autonumber stop
    cl_facade --> cl_db : Retrieve Participant data from database, when not found in cache
    cl_facade --> redis_cache : Retrieved data cached
    autonumber resume
    cl_facade -> tb_client : Pending //Transfer// requested via the CL-TB interface
    tb_client -> tb_nodes : //Transfer// updated to cluster\n via the state machine
    tb_nodes -> tb_nodes : VSR replicates \nacross cluster
    tb_client --> cl_facade : Return result
    cl_facade --> cl_domain : Return result
    cl_domain --> cl_handler : Return result
    cl_handler --> cl_api : Return result
    cl_api --> dfsp : Return result with //**transferId**//
    == Asynchronous Database Activities START ==
    cl_facade -> cl_db : **[ASYNC 1.1]**\n*//transferDuplicateCheck// DB record created
    cl_facade -> cl_db : **[ASYNC 1.2]**\n*//transfer//, \n*//transferParticipant//, \n*//ilpPacket// \n*//transferStateChange// \n*//transferExtension//\nDatabase records created.
    cl_db <--> cl_facade : **[ASYNC 1.3]**\n Database transaction committed
    == Asynchronous Database Activities STOP ==

||70||

    == Transfer Fulfilment ==
    dfsp -> cl_api : //JSON// \n(fulfil transfer data with //**transferId**//)
    cl_api -> cl_handler : ///jmeter/transfers/fulfil// \nHandler invoked.
    cl_handler -> cl_domain : Service layer invoked \n//handlePayeeResponse//
    cl_domain -> cl_facade : Domain to facade \n//savePayeeTransferResponse//
    cl_facade -> cl_db : New Database transaction for fulfillment.
    cl_facade -> cl_db : Obtain //**settlementWindowId**// for window where state is **OPEN**.
    cl_facade -> tb_client : //Transfer// posting requested via the CL-TB interface.
    tb_client -> tb_nodes : //transfer// Distributed to nodes\n via the state machine.
    tb_nodes -> tb_nodes : Replication via VSR.
    tb_client --> cl_facade : //transfer// posting create error **(none)**.
    cl_facade -> cl_db : Create \n*//transferFulfilment// \n*//transferStateChange// \nDatabase records.
    cl_facade -> cl_db : Database transaction committed.
    cl_facade --> cl_domain : Return result.
    cl_domain --> cl_handler : Return result.
    cl_handler --> cl_api : Return result.
    cl_api --> dfsp : Return result.
end

@enduml
