@startuml

participant "Mojaloop Adapter" as dfsp #B0D5FF
note over dfsp
    * Participant Bank A
    * Participant Bank B
end note

box Central-Ledger #FFFFF9
    participant "**API**" as cl_api
    participant "__api__ / Handler" as cl_handler
    participant "__domain__ / Service" as cl_domain
    participant "__models__ / Facade" as cl_facade

note over cl_api
        NodeJS interface
        invokes REST API
    end note

    note over cl_handler
        JSON request decoded & sent
        for processing via a handler
    end note

    note over cl_domain
        Domain folder where the service
        functions are exposed.
    end note

    note over cl_facade
        Facade for storing/retrieving data from
        MySQL and TigerBeetle
    end note
end box

box Storage #F9FFF9
	participant "TigerBeetle Client" as tb_client #D5E8D4
	collections "TigerBeetle Cluster" as tb_nodes #D5E8D4
	database "MySQL" as cl_db #DAE8FC
	database "Redis" as redis_cache #E1D5E7
end box

autonumber
group Create Transfer (2-Phase)
    dfsp -> cl_api : //JSON// \n**(transfer data)**
    cl_api -> cl_handler : ///jmeter/transfers/prepare// \nHandler invoked
    cl_handler -> cl_domain : Service layer invoked
    cl_domain -> cl_facade : Domain to facade
    cl_facade -> cl_db : Perform the following validations against the database:\n*//validateFspiopSourceMatchesPayer//\n*//validateParticipantByName//\n*//validatePositionAccountByNameAndCurrency//\n*//validateParticipantByName//\n*//validateAmount//\n*//validateConditionAndExpiration//\n*//validateDifferentDfsp//
    cl_facade -> redis_cache : Lookup participant data by \n//name//, //account type// (POSITION) and //currency//.
    autonumber stop
    cl_facade --> cl_db : If the participant data is not available in Redis, a database lookup is performed
    cl_facade --> redis_cache : Data looked up is now stored in Redis.
    autonumber resume
    cl_facade -> tb_client : Pending //Transfer// requested via the CL-TB interface.
    tb_client -> tb_nodes : //transfer// Distributed to nodes\n via the state machine.
    tb_nodes -> tb_nodes : **[ASYNC]**\nReplication via VSR.
    tb_client --> cl_facade : //transfer// create error **(none)**\n//(Replicated to 2 nodes)//
    cl_facade --> cl_domain : Return result
    cl_domain --> cl_handler : Return result
    cl_handler --> cl_api : Return result
    cl_api --> dfsp : Return result with //**transferId**//
    == TB and MySQL Database Activities START ==
    cl_facade -> cl_db : *--//transferDuplicateCheck//-- --DB record created--. Built in TB.
    cl_facade -> cl_db : *--//transfer//,--Built in TB. \n*--//transferParticipant//-- Built in TB. \n*//ilpPacket// \n*--//transferStateChange//--Built in TB. \n*//transferExtension//\nDatabase records created.
    cl_db <--> cl_facade : Database transaction committed.
    == TB and MySQL Database Activities STOP ==

||70||

    == Transfer Fulfilment ==
    dfsp -> cl_api : //JSON// \n(fulfil transfer data with //**transferId**//)
    cl_api -> cl_handler : ///jmeter/transfers/fulfil// \nHandler invoked.
    cl_handler -> cl_domain : Service layer invoked \n//handlePayeeResponse//
    cl_domain -> cl_facade : Domain to facade \n//savePayeeTransferResponse//
    cl_facade -> cl_db : New Database transaction for fulfillment.
    cl_facade -> cl_db : Obtain //**settlementWindowId**// for window where state is **OPEN**.
    cl_facade -> tb_client : //Transfer// posting requested via the CL-TB interface.\n1x - ""POSITION"" - //transfer// pending posted with **//settlementWindowId//** as ""user_data"".
    tb_client -> tb_nodes : //transfer// Distributed to nodes\n via the state machine.
    tb_nodes -> tb_nodes : **[ASYNC]**\nReplication via VSR.
    tb_client --> cl_facade : //transfer// posting create error **(none)**\n//(Replicated to 2 nodes)//.
    cl_facade -> cl_db : Create \n*--//transferFulfilment//-- Built in TB. \n*--//transferStateChange//-- Built in TB. \nDatabase records.
    cl_facade -> cl_db : Database transaction committed.
    cl_facade --> cl_domain : Return result.
    cl_domain --> cl_handler : Return result.
    cl_handler --> cl_api : Return result.
    cl_api --> dfsp : Return result.
end

@enduml
