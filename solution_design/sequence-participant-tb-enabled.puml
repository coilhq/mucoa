@startuml
title "__**Central Ledger with Tigerbeetle Enabled**__\n"

actor "Mojaloop Adapter" as dfsp
note over dfsp
    * Participant Bank A
    * Participant Bank B
end note

box Central Ledger #FFFFF9
    participant "**API**" as cl_api
    participant "__api__ / Handler" as cl_handler
    participant "__domain__ / Service" as cl_domain
    participant "__models__ / Facade" as cl_facade

    note over cl_api
        REST API deployed in NodeJS
    end note

    note over cl_handler
        JSON request decoded and
        sent for processing via a handler
    end note

    note over cl_domain
        Domain folder where the service
        functions are exposed.
    end note

    note over cl_facade
        Facade for storing/retrieving data from
        MySQL and TigerBeetle
    end note
end box

box Storage #F9FFF9
	control "Tigerbeetle Client" as tb_client
	collections "Tigerbeetle Nodes" as tb_nodes
	database "central-ledger" as cl_db
	database "Redis" as redis_cache
end box

autonumber
group Create Participant
    dfsp -> cl_api : //JSON// \n**(participant data)**
    cl_api -> cl_handler : Handler invoked
    cl_handler -> cl_domain : Service layer invoked
    cl_domain -> cl_facade : WS API //cel/jmeter/create//  \n**(JSON)**
    cl_facade -> cl_db : **[ASYNC]**\n//participant//, \n//participantCurrency//, \n//participantPosition// \n DB records created.
    cl_facade -> tb_client : //account// account create requested
    tb_client -> tb_nodes : //account// Distributed to nodes\n via the state machine
    tb_nodes -> tb_nodes : Replication via VSR
    tb_client --> cl_facade : //account// create error **(none)**
    cl_db <--> cl_facade : **[ASYNC]**\n Database transaction committed.
    cl_facade --> cl_domain : Return result
    cl_domain --> cl_handler : Return result
    cl_handler --> cl_api : Return result
    cl_api --> dfsp : Return result
end

autonumber
group Lookup Participant by Name
    dfsp -> cl_api : //JSON// \n**(name)**
    cl_api -> cl_handler : Handler invoked
    cl_handler -> cl_domain : Service layer invoked
    cl_domain -> cl_facade : WS API ///jmeter/participants/**{name}**//
    cl_facade -> tb_client : //account//\n TB account fetched.
    tb_client -> tb_nodes : //account// Distributed to nodes\n via the state machine
    tb_nodes -> tb_nodes : Replication via VSR
    tb_client --> cl_facade : //account// create error **(none)**
    cl_facade --> cl_domain : Return result
    cl_domain --> cl_handler : Return result
    cl_handler --> cl_api : Return result
    cl_api --> dfsp : Return result
end

@enduml
